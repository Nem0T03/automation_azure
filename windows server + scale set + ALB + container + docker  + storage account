#!/bin/bash

# Variables
resourceGroup="AZ900-RG"
location="EastAsia"
mainVMName="MainVM"
vmssName="ScaleSetVM"
storageAccountName="mystorageaccount$RANDOM"
containerNameMain="main-container"
containerNameScaleSet="scaleset-container"
adminUsername="azureuser"
vmSize="Standard_DS1_v2"
image="Win2019Datacenter"
scriptFileName="install_iis.ps1"
indexHtmlFileName="index.html"
adminPassword="YourPassword@123"  # Replace with your secure password
expiryDate="2024-12-31T23:59:00Z"  # Adjust expiry date for SAS token as needed
nsgName="MyNSG"
vnetName="MyVNet"
subnetName="MySubnet"
scaleSetCapacity=1
minInstanceCount=1
maxInstanceCount=5

# Step 1: Create the resource group
echo "Creating Resource Group: $resourceGroup..."
az group create --name "$resourceGroup" --location "$location"

# Step 2: Create a virtual network and subnet
echo "Creating Virtual Network: $vnetName..."
az network vnet create --resource-group "$resourceGroup" --name "$vnetName" --subnet-name "$subnetName" --location "$location"

# Step 3: Create a Network Security Group (NSG)
echo "Creating Network Security Group: $nsgName..."
az network nsg create --resource-group "$resourceGroup" --name "$nsgName" --location "$location"

# Step 4: Create inbound security rules to allow HTTP (port 80) and RDP (port 3389) in NSG
echo "Creating inbound security rule for port 80 (HTTP)..."
az network nsg rule create \
  --resource-group "$resourceGroup" \
  --nsg-name "$nsgName" \
  --name "AllowHTTP" \
  --priority 1001 \
  --protocol Tcp \
  --destination-port-ranges 80 \
  --access Allow \
  --direction Inbound

echo "Creating inbound security rule for port 3389 (RDP)..."
az network nsg rule create \
  --resource-group "$resourceGroup" \
  --nsg-name "$nsgName" \
  --name "AllowRDP" \
  --priority 1000 \
  --protocol Tcp \
  --destination-port-ranges 3389 \
  --access Allow \
  --direction Inbound

# Step 5: Associate the NSG with the subnet
echo "Associating NSG with the subnet..."
az network vnet subnet update --vnet-name "$vnetName" --name "$subnetName" --resource-group "$resourceGroup" --network-security-group "$nsgName"

# Step 6: Create a storage account
echo "Creating Storage Account: $storageAccountName..."
az storage account create --name "$storageAccountName" --resource-group "$resourceGroup" --location "$location" --sku Standard_LRS

# Step 7: Retrieve the storage account key
echo "Retrieving Storage Account Key..."
accountKey=$(az storage account keys list --resource-group "$resourceGroup" --account-name "$storageAccountName" --query '[0].value' -o tsv)

# Step 8: Create containers in the storage account
echo "Creating containers..."
az storage container create --name "$containerNameMain" --account-name "$storageAccountName" --account-key "$accountKey"
az storage container create --name "$containerNameScaleSet" --account-name "$storageAccountName" --account-key "$accountKey"

# Step 9: Create the index.html file template
echo "Creating index.html file template..."
cat <<EOF > "$indexHtmlFileName"
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Welcome to My Web Server</title>
</head>
<body>
    <h1>Hello, World!</h1>
    <p>This is a simple web page hosted on my Windows Server.</p>
    <p>Main VM Public IP: <strong>%PUBLIC_IP%</strong></p>
</body>
</html>
EOF

# Step 10: Upload the script to the appropriate containers
echo "Uploading script to containers..."
echo 'Install-WindowsFeature -name Web-Server -IncludeManagementTools' > "$scriptFileName"
az storage blob upload --account-name "$storageAccountName" --account-key "$accountKey" --container-name "$containerNameMain" --file "$scriptFileName" --name "$scriptFileName"
az storage blob upload --account-name "$storageAccountName" --account-key "$accountKey" --container-name "$containerNameScaleSet" --file "$scriptFileName" --name "$scriptFileName"

# Step 11: Generate SAS tokens for the script
echo "Generating SAS tokens for the script..."
sasTokenMain=$(az storage blob generate-sas --account-name "$storageAccountName" --container-name "$containerNameMain" --name "$scriptFileName" --permissions r --expiry "$expiryDate" --account-key "$accountKey" --https-only --output tsv)
sasTokenScaleSet=$(az storage blob generate-sas --account-name "$storageAccountName" --container-name "$containerNameScaleSet" --name "$scriptFileName" --permissions r --expiry "$expiryDate" --account-key "$accountKey" --https-only --output tsv)

# Construct the full URL to the script with the SAS tokens
scriptFileUriMain="https://$storageAccountName.blob.core.windows.net/$containerNameMain/$scriptFileName?$sasTokenMain"
scriptFileUriScaleSet="https://$storageAccountName.blob.core.windows.net/$containerNameScaleSet/$scriptFileName?$sasTokenScaleSet"

# Step 12: Create the main VM
echo "Creating main VM: $mainVMName..."
az vm create \
  --resource-group "$resourceGroup" \
  --name "$mainVMName" \
  --image "$image" \
  --admin-username "$adminUsername" \
  --admin-password "$adminPassword" \
  --size "$vmSize" \
  --public-ip-sku Standard \
  --vnet-name "$vnetName" \
  --subnet "$subnetName"

# Step 13: Install Docker and run IIS container on the main VM using a custom script extension
echo "Installing Docker and running IIS container on the main VM..."
az vm extension set \
  --resource-group "$resourceGroup" \
  --vm-name "$mainVMName" \
  --name CustomScriptExtension \
  --publisher Microsoft.Compute \
  --settings "{\"commandToExecute\":\"powershell -ExecutionPolicy Unrestricted -Command \
    Install-WindowsFeature -Name containers -IncludeManagementTools; \
    [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \
    Install-Module -Name DockerMsftProvider -Repository PSGallery -Force; \
    Install-Package -Name docker -ProviderName DockerMsftProvider -Force; \
    Start-Service docker; \
    docker pull mcr.microsoft.com/windows/servercore/iis; \
    docker run -d -p 80:80 --name iis-container mcr.microsoft.com/windows/servercore/iis\"}"

# Step 14: Retrieve the public IP address of the main VM
echo "Retrieving the public IP address of the main VM..."
publicIP=$(az vm list-ip-addresses --resource-group "$resourceGroup" --name "$mainVMName" --query "[].virtualMachine.network.publicIpAddresses[0].ipAddress" -o tsv)

# Check if the public IP address was retrieved
if [ -z "$publicIP" ]; then
    echo "Error: Could not retrieve the public IP address of the VM"
    exit 1
else
    echo "Public IP Address of the main VM: $publicIP"
fi

# Step 15: Replace placeholder in index.html with the public IP
echo "Updating index.html with public IP..."
sed -i "s/%PUBLIC_IP%/$publicIP/g" "$indexHtmlFileName"

# Step 16: Upload the updated index.html file to the main VM container
echo "Uploading updated index.html to the main container..."
az storage blob upload --account-name "$storageAccountName" --account-key "$accountKey" --container-name "$containerNameMain" --file "$indexHtmlFileName" --name "$indexHtmlFileName"

# Step 17: Create the VM Scale Set
echo "Creating VM Scale Set: $vmssName..."
az vmss create \
  --resource-group "$resourceGroup" \
  --name "$vmssName" \
  --image "$image" \
  --admin-username "$adminUsername" \
  --admin-password "$adminPassword" \
  --instance-count $scaleSetCapacity \
  --vm-sku "$vmSize" \
  --subnet "$subnetName" \
  --vnet-name "$vnetName" \
  --upgrade-policy-mode automatic \
  --custom-data "$scriptFileUriScaleSet" \
  --lb-sku Standard

# Step 18: Configure autoscale based on CPU usage
echo "Configuring autoscale for the VM Scale Set..."
az monitor autoscale create --resource-group "$resourceGroup" --resource "$vmssName" --resource-type "Microsoft.Compute/virtualMachineScaleSets" --name "$vmssName-ScaleSet" --min-count $minInstanceCount --max-count $maxInstanceCount --count $scaleSetCapacity

az monitor autoscale rule create --resource-group "$resourceGroup" --autoscale-name "$vmssName-ScaleSet" --scale out 1 --condition "Percentage CPU > 1 avg 1m"
az monitor autoscale rule create --resource-group "$resourceGroup" --autoscale-name "$vmssName-ScaleSet" --scale in 1 --condition "Percentage CPU < 1 avg 1m"

echo "Azure automation script completed successfully!"
