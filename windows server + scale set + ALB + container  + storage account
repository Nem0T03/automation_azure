#!/bin/bash

# Variables
resourceGroup="AZ900-RG"
location="EastAsia"
mainVMName="MainVM"
vmssName="ScaleSetVM"
storageAccountName="mystorageaccount$RANDOM"
containerNameMain="main-container"
containerNameScaleSet="scaleset-container"
adminUsername="azureuser"
vmSize="Standard_DS1_v2"
image="Win2019Datacenter"
scriptFileName="install_iis.ps1"
indexHtmlFileName="index.html"
adminPassword="YourPassword@123"  # Replace with your secure password
expiryDate="2024-12-31T23:59:00Z"  # Adjust expiry date for SAS token as needed
nsgName="MyNSG"
vnetName="MyVNet"
subnetName="MySubnet"
scaleSetCapacity=1
minInstanceCount=1
maxInstanceCount=5

# Function to create the resource group
createResourceGroup() {
    echo "Creating Resource Group: $resourceGroup..."
    az group create --name "$resourceGroup" --location "$location"
}

# Function to create virtual network and subnet
createVNetAndSubnet() {
    echo "Creating Virtual Network: $vnetName..."
    az network vnet create --resource-group "$resourceGroup" --name "$vnetName" --subnet-name "$subnetName" --location "$location"
}

# Function to create Network Security Group (NSG)
createNSG() {
    echo "Creating Network Security Group: $nsgName..."
    az network nsg create --resource-group "$resourceGroup" --name "$nsgName" --location "$location"

    # Create inbound security rules
    echo "Creating inbound security rule for port 80 (HTTP) allowing any source..."
    az network nsg rule create --resource-group "$resourceGroup" --nsg-name "$nsgName" --name "AllowHTTP" --priority 1001 --protocol Tcp --destination-port-ranges 80 --access Allow --direction Inbound --source-address-prefixes "*"

    echo "Creating inbound security rule for port 3389 (RDP)..."
    az network nsg rule create --resource-group "$resourceGroup" --nsg-name "$nsgName" --name "AllowRDP" --priority 1000 --protocol Tcp --destination-port-ranges 3389 --access Allow --direction Inbound

    # Associate the NSG with the subnet
    echo "Associating NSG with the subnet..."
    az network vnet subnet update --vnet-name "$vnetName" --name "$subnetName" --resource-group "$resourceGroup" --network-security-group "$nsgName"
}

# Function to create a storage account and containers
createStorageAccount() {
    echo "Creating Storage Account: $storageAccountName..."
    az storage account create --name "$storageAccountName" --resource-group "$resourceGroup" --location "$location" --sku Standard_LRS

    echo "Retrieving Storage Account Key..."
    accountKey=$(az storage account keys list --resource-group "$resourceGroup" --account-name "$storageAccountName" --query '[0].value' -o tsv)

    echo "Creating containers..."
    az storage container create --name "$containerNameMain" --account-name "$storageAccountName" --account-key "$accountKey"
    az storage container create --name "$containerNameScaleSet" --account-name "$storageAccountName" --account-key "$accountKey"
}

# Function to create an empty index.html file
createIndexHtml() {
    echo "Creating an empty index.html file..."
    cat <<EOF > "$indexHtmlFileName"
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Welcome</title>
</head>
<body>
    <h1>Hello, Azure!</h1>
    <p>Main VM Public IP: <strong>%PUBLIC_IP%</strong></p>
</body>
</html>
EOF
}

# Function to upload scripts and generate SAS tokens
uploadScriptsAndGenerateSASTokens() {
    echo "Uploading script to containers..."
    echo 'Install-WindowsFeature -name Web-Server -IncludeManagementTools' > "$scriptFileName"
    az storage blob upload --account-name "$storageAccountName" --account-key "$accountKey" --container-name "$containerNameMain" --file "$scriptFileName" --name "$scriptFileName"
    az storage blob upload --account-name "$storageAccountName" --account-key "$accountKey" --container-name "$containerNameScaleSet" --file "$scriptFileName" --name "$scriptFileName"

    echo "Generating SAS tokens for the script..."
    sasTokenMain=$(az storage blob generate-sas --account-name "$storageAccountName" --container-name "$containerNameMain" --name "$scriptFileName" --permissions r --expiry "$expiryDate" --account-key "$accountKey" --https-only --output tsv)
    sasTokenScaleSet=$(az storage blob generate-sas --account-name "$storageAccountName" --container-name "$containerNameScaleSet" --name "$scriptFileName" --permissions r --expiry "$expiryDate" --account-key "$accountKey" --https-only --output tsv)

    scriptFileUriMain="https://$storageAccountName.blob.core.windows.net/$containerNameMain/$scriptFileName?$sasTokenMain"
    scriptFileUriScaleSet="https://$storageAccountName.blob.core.windows.net/$containerNameScaleSet/$scriptFileName?$sasTokenScaleSet"

    echo "$scriptFileUriMain"
    echo "$scriptFileUriScaleSet"
}

# Function to create the main VM
createMainVM() {
    echo "Creating main VM: $mainVMName..."
    az vm create \
        --resource-group "$resourceGroup" \
        --name "$mainVMName" \
        --image "$image" \
        --admin-username "$adminUsername" \
        --admin-password "$adminPassword" \
        --size "$vmSize" \
        --public-ip-sku Standard \
        --vnet-name "$vnetName" \
        --subnet "$subnetName"
}

# Function to install IIS and configure the main VM
configureMainVM() {
    echo "Installing IIS and setting up container on the main VM..."
    az vm extension set \
        --resource-group "$resourceGroup" \
        --vm-name "$mainVMName" \
        --name CustomScriptExtension \
        --publisher Microsoft.Compute \
        --settings "{\"commandToExecute\":\"powershell -ExecutionPolicy Unrestricted -Command \
        Install-WindowsFeature -Name Web-Server -IncludeManagementTools; \
        Start-Service W3SVC; \
        Set-Content -Path 'C:\\inetpub\\wwwroot\\index.html' -Value (Get-Content '$PWD/$indexHtmlFileName' -Raw)\"}"
}

# Function to retrieve the public IP address of the main VM
retrievePublicIP() {
    echo "Retrieving the public IP address of the main VM..."
    publicIP=$(az vm list-ip-addresses --resource-group "$resourceGroup" --name "$mainVMName" --query "[].virtualMachine.network.publicIpAddresses[0].ipAddress" -o tsv)

    if [ -z "$publicIP" ]; then
        echo "Error: Could not retrieve the public IP address of the VM"
        exit 1
    else
        echo "Public IP Address of the main VM: $publicIP"
    fi
}

# Function to update index.html with public IP
updateIndexHtml() {
    echo "Updating index.html with public IP..."
    sed -i "s/%PUBLIC_IP%/$publicIP/g" "$indexHtmlFileName"
}

# Function to upload updated index.html
uploadUpdatedIndexHtml() {
    echo "Uploading updated index.html to the main container..."
    az storage blob upload --account-name "$storageAccountName" --account-key "$accountKey" --container-name "$containerNameMain" --file "$indexHtmlFileName" --name "$indexHtmlFileName"
}

# Function to create VM Scale Set
createVMSS() {
    echo "Creating VM Scale Set: $vmssName..."
    az vmss create \
        --resource-group "$resourceGroup" \
        --name "$vmssName" \
        --image "$image" \
        --admin-username "$adminUsername" \
        --admin-password "$adminPassword" \
        --instance-count $scaleSetCapacity \
        --vm-sku "$vmSize" \
        --subnet "$subnetName" \
        --vnet-name "$vnetName" \
        --upgrade-policy-mode automatic \
        --custom-data "$scriptFileUriScaleSet" \
        --lb-sku Standard
}

# Function to configure autoscale based on CPU usage
configureAutoscale() {
    echo "Configuring autoscale for the VM Scale Set..."
    az monitor autoscale create --resource-group "$resourceGroup" --resource "$vmssName" --resource-type "Microsoft.Compute/virtualMachineScaleSets" --name "$vmssName" \
    --min-count $minInstanceCount --max-count $maxInstanceCount --count $scaleSetCapacity
    az monitor autoscale rule create --resource-group "$resourceGroup" --autoscale-name "$vmssName" --condition "Percentage CPU > 1 avg 1m" --scale out 1
    az monitor autoscale rule create --resource-group "$resourceGroup" --autoscale-name "$vmssName" --condition "Percentage CPU < 1 avg 5m" --scale in 1
}

# Main script execution
createResourceGroup
createVNetAndSubnet
createNSG
createStorageAccount
createIndexHtml
uploadScriptsAndGenerateSASTokens
createMainVM
configureMainVM
retrievePublicIP
updateIndexHtml
uploadUpdatedIndexHtml
createVMSS
configureAutoscale

echo "Azure automation script completed successfully."
