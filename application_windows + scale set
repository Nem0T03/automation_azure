#!/bin/bash

# Variables
resourceGroup="AZ900-RG"
location="EastAsia"
vmssName="MyVMSS"
storageAccountName="mystorageaccount$RANDOM"
containerName="myscripts"
adminUsername="azureuser"
vmSize="Standard_DS1_v2"
image="Win2019Datacenter"
scriptFileName="install_iis.ps1"
scaleSetCapacity=1  # Reduce initial instance count to stay within quota limits
adminPassword="YourPassword@123"  # Replace with your secure password
expiryDate="2024-12-31T23:59:00Z"  # Adjust expiry date for SAS token as needed
nsgName="MyNSG"
vnetName="MyVNet"
subnetName="MySubnet"

# Step 1: Create the resource group
echo "Creating Resource Group: $resourceGroup..."
az group create --name "$resourceGroup" --location "$location"

# Step 2: Create a virtual network and subnet
echo "Creating Virtual Network: $vnetName..."
az network vnet create --resource-group "$resourceGroup" --name "$vnetName" --subnet-name "$subnetName" --location "$location"

# Step 3: Create a Network Security Group (NSG)
echo "Creating Network Security Group: $nsgName..."
az network nsg create --resource-group "$resourceGroup" --name "$nsgName" --location "$location"

# Step 4: Create an inbound security rule to allow port 80 (HTTP) in NSG
echo "Creating inbound security rule for port 80 (HTTP)..."
az network nsg rule create \
  --resource-group "$resourceGroup" \
  --nsg-name "$nsgName" \
  --name "AllowHTTP" \
  --priority 1001 \
  --protocol Tcp \
  --destination-port-ranges 80 \
  --access Allow \
  --direction Inbound

# Step 5: Associate the NSG with the subnet
echo "Associating NSG with the subnet..."
az network vnet subnet update --vnet-name "$vnetName" --name "$subnetName" --resource-group "$resourceGroup" --network-security-group "$nsgName"

# Step 6: Create a storage account
echo "Creating Storage Account: $storageAccountName..."
az storage account create --name "$storageAccountName" --resource-group "$resourceGroup" --location "$location" --sku Standard_LRS

# Step 7: Retrieve the storage account key
echo "Retrieving Storage Account Key..."
accountKey=$(az storage account keys list --resource-group "$resourceGroup" --account-name "$storageAccountName" --query '[0].value' -o tsv)

# Step 8: Create a container in the storage account
echo "Creating container: $containerName..."
az storage container create --name "$containerName" --account-name "$storageAccountName" --account-key "$accountKey"

# Step 9: Upload the script to the container
echo "Uploading script to the storage container..."
echo 'Install-WindowsFeature -name Web-Server -IncludeManagementTools' > "$scriptFileName"
az storage blob upload --account-name "$storageAccountName" --account-key "$accountKey" --container-name "$containerName" --file "$scriptFileName" --name "$scriptFileName"

# Step 10: Generate a SAS token for the script
echo "Generating SAS token for the script..."
sasToken=$(az storage blob generate-sas --account-name "$storageAccountName" --container-name "$containerName" --name "$scriptFileName" --permissions r --expiry "$expiryDate" --account-key "$accountKey" --https-only --output tsv)

# Construct the full URL to the script with the SAS token
fileUri="https://$storageAccountName.blob.core.windows.net/$containerName/$scriptFileName?$sasToken"

# Step 11: Create the VM Scale Set with the subnet and NSG
echo "Creating VM Scale Set: $vmssName..."
az vmss create \
  --resource-group "$resourceGroup" \
  --name "$vmssName" \
  --image "$image" \
  --admin-username "$adminUsername" \
  --instance-count "$scaleSetCapacity" \
  --vm-sku "$vmSize" \
  --subnet "$subnetName" \
  --vnet-name "$vnetName" \
  --upgrade-policy-mode automatic \
  --storage-sku Standard_LRS \
  --authentication-type password \
  --admin-password "$adminPassword"

# Step 12: Add Custom Script Extension to install IIS from the script
echo "Adding Custom Script Extension to VM Scale Set..."
az vmss extension set \
  --publisher Microsoft.Compute \
  --version 1.10 \
  --name CustomScriptExtension \
  --resource-group "$resourceGroup" \
  --vmss-name "$vmssName" \
  --settings "{'fileUris': ['$fileUri'], 'commandToExecute': 'powershell -ExecutionPolicy Unrestricted -File $scriptFileName'}"

# Step 13: Apply the scaling rule based on CPU usage
echo "Setting up autoscale for VM Scale Set: $vmssName..."

# Get the resource ID of the VM Scale Set
vmssResourceId=$(az vmss show --resource-group "$resourceGroup" --name "$vmssName" --query "id" -o tsv)

# Create the autoscale settings
az monitor autoscale create \
  --resource-group "$resourceGroup" \
  --name "VMSSAutoScale" \
  --resource "$vmssResourceId" \
  --min-count 1 \
  --max-count 4 \
  --count 1

# Step 14: Add a scaling rule to increase VM count when CPU usage > 1% for 1 minute
echo "Adding autoscale rule for increasing VM count on high CPU..."
az monitor autoscale rule create \
  --resource-group "$resourceGroup" \
  --autoscale-name "VMSSAutoScale" \
  --scale out 1 \
  --condition "Percentage CPU > 1 avg 1m" \
  --cooldown 1 \
  --resource "$vmssResourceId"

# Step 15: Add a scaling rule to decrease VM count when CPU usage < 1% for 1 minute
echo "Adding autoscale rule for decreasing VM count on lower CPU..."
az monitor autoscale rule create \
  --resource-group "$resourceGroup" \
  --autoscale-name "VMSSAutoScale" \
  --scale in 1 \
  --condition "Percentage CPU < 1 avg 1m" \
  --cooldown 1 \
  --resource "$vmssResourceId"

echo "Deployment complete!"
